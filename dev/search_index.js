var documenterSearchIndex = {"docs":
[{"location":"#AeroAcoustics-1","page":"AeroAcoustics","title":"AeroAcoustics","text":"","category":"section"},{"location":"#","page":"AeroAcoustics","title":"AeroAcoustics","text":"AeroAcoustics.jl is a package for post-processing of microphone array measurements. It aims to provide basic functionality for computing cross-spectral matrices and frequency-domain beamforming.","category":"page"},{"location":"#","page":"AeroAcoustics","title":"AeroAcoustics","text":"The package repository is here: https://gitlab.windenergy.dtu.dk/ollyl/AeroAcoustics.jl","category":"page"},{"location":"#","page":"AeroAcoustics","title":"AeroAcoustics","text":"This package has been developed over several years, but has reached a stable state. A brief introduction to the usage is given below.","category":"page"},{"location":"#Installation-1","page":"AeroAcoustics","title":"Installation","text":"","category":"section"},{"location":"#","page":"AeroAcoustics","title":"AeroAcoustics","text":"From the julia REPL:  ","category":"page"},{"location":"#","page":"AeroAcoustics","title":"AeroAcoustics","text":"pkg> add https://gitlab.windenergy.dtu.dk/ollyl/AeroAcoustics.jl","category":"page"},{"location":"#","page":"AeroAcoustics","title":"AeroAcoustics","text":"and optionally running the tests:  ","category":"page"},{"location":"#","page":"AeroAcoustics","title":"AeroAcoustics","text":"pkg> test AeroAcoustics","category":"page"},{"location":"#","page":"AeroAcoustics","title":"AeroAcoustics","text":"This runs the tests and downloads a measurement file to the /data directory.","category":"page"},{"location":"#Quick-start-1","page":"AeroAcoustics","title":"Quick start","text":"","category":"section"},{"location":"#","page":"AeroAcoustics","title":"AeroAcoustics","text":"The package is structured around the struct Environment, that takes all neccessary variables associated with an acoustic image as input. We will use the measurement data downloaded for the unit tests, which is located in /data. This file is a cross-spectral matrix (csm), a frequency domain representation of the measurement. This example is also available as a Jupyter notebook in the examples directory. First we import packages for reading data and plotting:","category":"page"},{"location":"#","page":"AeroAcoustics","title":"AeroAcoustics","text":"using HDF5, AeroAcoustics, PyPlot","category":"page"},{"location":"#","page":"AeroAcoustics","title":"AeroAcoustics","text":"Open the hdf5 file from the test directory and assemble the data to a Complex array.","category":"page"},{"location":"#","page":"AeroAcoustics","title":"AeroAcoustics","text":"csm_file = joinpath(dirname(@__DIR__),\"test\",\"data\",\"test1_csm.h5\")\ncsm_ref = h5open(csm_file, \"r\") do file\n    read(file, \"CsmData/csmReal\")+im*read(file, \"CsmData/csmImag\")\nend","category":"page"},{"location":"#","page":"AeroAcoustics","title":"AeroAcoustics","text":"and get the associated frequencies, microphone array and measurement distance z0:","category":"page"},{"location":"#","page":"AeroAcoustics","title":"AeroAcoustics","text":"fc = h5read(csm_file, \"CsmData\")[\"binCenterFrequenciesHz\"]\nmicgeom = h5read(csm_file, \"CsmData\")[\"arrayGeom\"]\nz0 = h5readattr(csm_file, \"CsmData\")[\"z0\"]","category":"page"},{"location":"#","page":"AeroAcoustics","title":"AeroAcoustics","text":"We now have all the data to populate the Environment struct. First, the csm is constructed as a FreqArray:","category":"page"},{"location":"#","page":"AeroAcoustics","title":"AeroAcoustics","text":"CSM = FreqArray(csm_ref,fc)","category":"page"},{"location":"#","page":"AeroAcoustics","title":"AeroAcoustics","text":"which holds the array and associated frequency bins. The Environment is defined:","category":"page"},{"location":"#","page":"AeroAcoustics","title":"AeroAcoustics","text":"E = Environment(\n    z0=z0,\n    micgeom=micgeom,\n    CSM=CSM,\n    flim=(3000,4000),\n    Nx = 21,\n    Ny = 21,\n    xlim=(-0.5,0.5),\n    ylim=(-0.5,0.5)\n    )","category":"page"},{"location":"#","page":"AeroAcoustics","title":"AeroAcoustics","text":"Where the measurement distance z0, the microphone geometry micgeom, and the csm CSM are required variables.  See the optional inputs for Environment by typing:","category":"page"},{"location":"#","page":"AeroAcoustics","title":"AeroAcoustics","text":"help?> Environment","category":"page"},{"location":"#","page":"AeroAcoustics","title":"AeroAcoustics","text":"Now, we need to assign steering vectors (transfer functions) between the grid points defined in the environment E and the microphone locations in micgeom, this is done in a simple manner:","category":"page"},{"location":"#","page":"AeroAcoustics","title":"AeroAcoustics","text":"steeringvectors!(E)","category":"page"},{"location":"#","page":"AeroAcoustics","title":"AeroAcoustics","text":"where the \"!\" mutates the environment E and stores the steering vectors associated with the Environment. If a flow field is defined in the environment, the correct steering vectors will automatically be calculated. Next, we calculate the beamforming image:","category":"page"},{"location":"#","page":"AeroAcoustics","title":"AeroAcoustics","text":"b = beamforming(E)","category":"page"},{"location":"#","page":"AeroAcoustics","title":"AeroAcoustics","text":"the output is a FreqArray of size E.Nx*E.Ny times the number of frequency bins within the limits defined in E. To plot the acoustic image, reshape the beamforming result and convert to dB:","category":"page"},{"location":"#","page":"AeroAcoustics","title":"AeroAcoustics","text":"bdB = SPL.(reshape(b[:,1],E.Nx,E.Ny))\npcolormesh(E.rx,E.ry,bdB)\ncolorbar()","category":"page"}]
}
