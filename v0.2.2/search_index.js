var documenterSearchIndex = {"docs":
[{"location":"reference/#API-Reference-1","page":"API Reference","title":"API Reference","text":"","category":"section"},{"location":"reference/#General-1","page":"API Reference","title":"General","text":"","category":"section"},{"location":"reference/#","page":"API Reference","title":"API Reference","text":"Modules = [AeroAcoustics]\nPages   = [\"AeroAcoustics.jl\",\"types.jl\",\"utils.jl\"]","category":"page"},{"location":"reference/#AeroAcoustics.DR!-Tuple{FreqArray}","page":"API Reference","title":"AeroAcoustics.DR!","text":"DR!(CSM::FreqArray)\n\nApply diagonal removal to CSM.\n\n\n\n\n\n","category":"method"},{"location":"reference/#AeroAcoustics.DR-Tuple{FreqArray}","page":"API Reference","title":"AeroAcoustics.DR","text":"DR(CSM::FreqArray)\n\nApply diagonal removal to CSM and new array.\n\n\n\n\n\n","category":"method"},{"location":"reference/#AeroAcoustics.narrow2oct-Tuple{FreqArray, Any}","page":"API Reference","title":"AeroAcoustics.narrow2oct","text":"narrow2oct(x::FreqArray,n,nomial::Bool=true;psd=false)\n\nSum narrow band spectrum to 1/n octave bands given narrow band frequencies f in x.\n\n\n\n\n\n","category":"method"},{"location":"reference/#AeroAcoustics.Environment","page":"API Reference","title":"AeroAcoustics.Environment","text":"Environment\n\nThe Environment struct is required for most methods and defines the geometrical setup, constants, and stores the relevant data together. The microphone array is assumed to be at the center of the coordinate system. The fields are\n\nArguments\n\nRequired:\n\nmicgeom::Array{T,2}: (x,y,z) coordinates for microhone array.\nz0::Real: distance to source plane from microphone array.\nCSM::FreqArray: Cross-spectral matrix, size M x M x Nf, where M is the number of microphones and Nf is the number of frequency bins.\n\nOptional:\n\nflim::Tuple=extrema(CSM.fc): Frequency limits (fmin,fmax).\nNx::Integer=21: Number of computational gridpoint in x direction.\nNy::Integer=21: Number of computational gridpoint in y direction.\nxlim::Tuple=(-1.,1.): Cartesian x-coordinate limits.\nylim::Tuple=(-1.,1.): Cartesian y-coordinate limits.\nwv=ones(size(micgeom,2)): Microphones on/off. \nwc::Bool=false: Microphones coherence weighting.\ndr::Bool=false: Diagonal removal of CSM\nw=ones(M,Nf): Microphone weights. If wc=true it calculates coherence weighting.\nshear::Bool = false: Amiet phase correction\nampcorr::Bool = shear: Amiet amplitude correction (only applies when shear = true)\nc::Real=343.: Speed of sound [m/s].\nMa::Real=0.0: Mach number (sign determines flow direction)\nh::Real=0.0: Distance from array center to shear layer (Amiet correction) should be supplied when Ma != 0.\nmulti_thread::Bool = false: Enable multi-threading via the ThreadsX package.\n\n\n\n\n\n","category":"type"},{"location":"reference/#AeroAcoustics.coherence_weights-Tuple{Any}","page":"API Reference","title":"AeroAcoustics.coherence_weights","text":"coherence_weights(CSM)\n\nCalculate microphone weights according to mean mututal-coherence.\n\nAmaral et al. “Slat Noise from an MD30P30N Airfoil at Extreme Angles of Attack,” AIAA Journal, vol. 56, no. 3, pp. 964–978, Mar. 2018.\n\n\n\n\n\n","category":"method"},{"location":"reference/#AeroAcoustics.enbw-Tuple{Any, Any}","page":"API Reference","title":"AeroAcoustics.enbw","text":"enbw(fs,win)\n\nEquivalent Noise Band Width. Use to convert power spectrum to power spectral density and reverse. PS = PSD*ENBW\n\n\n\n\n\n","category":"method"},{"location":"reference/#AeroAcoustics.octavebandlimits-Union{Tuple{T}, Tuple{Vector{T}, Any}} where T<:Real","page":"API Reference","title":"AeroAcoustics.octavebandlimits","text":"octavebandlimits(fc,n)\n\nCompute 1/n\b octave band limits given center frequencies fc.\n\n\n\n\n\n","category":"method"},{"location":"reference/#AeroAcoustics.octavebands","page":"API Reference","title":"AeroAcoustics.octavebands","text":"octavebands(n,flim=(16.,40000.),nomial::Bool=false)\n\nCompute 1/n octave band center frequencies.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Basic-methods-1","page":"API Reference","title":"Basic methods","text":"","category":"section"},{"location":"reference/#","page":"API Reference","title":"API Reference","text":"Modules = [AeroAcoustics]\nPages   = [\"beamforming.jl\", \"csm.jl\",\"psf.jl\",\"sourceintegration.jl\",\"steeringvectors.jl\"]","category":"page"},{"location":"reference/#AeroAcoustics.beamforming-Tuple{Environment}","page":"API Reference","title":"AeroAcoustics.beamforming","text":"beamforming(Environment)\n\nCalculate frequency-domain beamforming using cross-spectral matrix \u001dcsm and steering vector v stored in Environment struct\n\n\n\n\n\n","category":"method"},{"location":"reference/#AeroAcoustics.beamforming-Union{Tuple{B}, Tuple{A}, Tuple{N}, Tuple{T2}, Tuple{T1}, Tuple{A, B}} where {T1<:AbstractFloat, T2<:AbstractFloat, N, A<:AbstractArray{Complex{T1}, N}, B<:AbstractArray{Complex{T2}, N}}","page":"API Reference","title":"AeroAcoustics.beamforming","text":"beamforming(csm,v)\n\nCalculate frequency-domain beamforming using cross-spectral matrix \u001dcsm and steering vector v.\u001c csm must be a square (Hermitian) matrix optionally with a \u001cthird (frequency) dimension. First dimension of v and csm must be equal.\n\n\n\n\n\n","category":"method"},{"location":"reference/#AeroAcoustics.csm-Union{Tuple{AbstractArray{T, N} where N}, Tuple{T}} where T<:AbstractFloat","page":"API Reference","title":"AeroAcoustics.csm","text":"csm(t;n=1024,noverlap=div(n,2),fs=1,win=DSP.hanning(n),scaling=\"spectrum\")\n\nCalculate cross-spectral matrix from time series t which is S x M dimensional, where S is the number of samples and Mthe number of microphones.\n\n\n\n\n\n","category":"method"},{"location":"reference/#AeroAcoustics.psf","page":"API Reference","title":"AeroAcoustics.psf","text":"psf(Environment[,cent])\n\nCalculate frequency-domain point spread function using the Environment struct to access steeringvectors. Optionally, supply the index where the psf is centered, default is (N/2)+1.\n\n\n\n\n\n","category":"function"},{"location":"reference/#AeroAcoustics.SPI-Tuple{FreqArray, Environment, Any, Any}","page":"API Reference","title":"AeroAcoustics.SPI","text":"SPI(b::FreqArray,E::Environment,dxdy,limits)\n\nConvenience function to normalize source integration of a beamforming result.\n\n\n\n\n\n","category":"method"},{"location":"reference/#AeroAcoustics.sourceintegration-Union{Tuple{T2}, Tuple{T1}, Tuple{Vector{T1}, Environment, Vector{T2}}} where {T1, T2}","page":"API Reference","title":"AeroAcoustics.sourceintegration","text":"sourceintegration(x::Vector,env::Environment,limits::Vector{T}) where T\nsourceintegration(x::Vector,env::Environment,limits::Vector{Vector{T}}) where T\nsourceintegration(x::FreqArray,env::Environment,limits::Vector{T}) where T\nsourceintegration(x::FreqArray,env::Environment,limits::Vector{Vector{T}}) where T\n\nSource integration of x from limits given in cartesian coordinates [xmin,xmax,ymin,ymax].\n\nsrc1 = [-0.1,0.1,-0.1,0.1]\nsrc2 = [-0.2,0.0,-0.1,0.1]\nlimits = [src1,src2]\nsrcint = sourceintegration(x,env,limits)\n\nOptionally supply keyword int_thres to set a threshold on source integration. Default is set to Inf which sum all values within integration region.\n\n\n\n\n\n","category":"method"},{"location":"reference/#AeroAcoustics.steeringvectors-Tuple{Environment}","page":"API Reference","title":"AeroAcoustics.steeringvectors","text":"steeringvectors(E::Environment)\n\nPre-compute steeringvectors for beamforming using an \u001dEnvironment with the needed parameters.\n\n\n\n\n\n","category":"method"},{"location":"reference/#AeroAcoustics.csm_slow-Union{Tuple{AbstractArray{T, N} where N}, Tuple{T}} where T<:AbstractFloat","page":"API Reference","title":"AeroAcoustics.csm_slow","text":"csm_slow(t;n=1024,noverlap=div(n,2),fs=1,win=DSP.hanning(n),scaling=\"spectrum\")\n\nCalculate cross-spectral matrix from time series t which is S x M dimensional, where S is the number of samples and Mthe number of microphones. This version is slower than csm but allocates much less (in some cases), therefore csm_slow could be used for long time signals.\n\n\n\n\n\n","category":"method"},{"location":"reference/#AeroAcoustics.psf_col!-Union{Tuple{B}, Tuple{A}, Tuple{N}, Tuple{T}, Tuple{A, B, Int64}} where {T<:AbstractFloat, N, A<:AbstractVector{T}, B<:AbstractArray{Complex{T}, N}}","page":"API Reference","title":"AeroAcoustics.psf_col!","text":"psf_col!(p,steeringvec,cent)\n\nCalculate single frequency point spread function as a column vector.\n\n\n\n\n\n","category":"method"},{"location":"reference/#AeroAcoustics.point_to_region-Union{Tuple{N}, Tuple{T}, Tuple{Tuple{T, T} where T, Tuple{Vararg{T, N}}}} where {T, N}","page":"API Reference","title":"AeroAcoustics.point_to_region","text":"point_to_region(src,dxdy)\n\nHelper function to get integration limits from src coordinates and size of area dxdy\n\nsources = [(0.1,0.1),(-0.1,0.1),(-0.1,-0.1),(0.1,-0.1)]\ndxdy = (0.1,0.1)\nlimits = point_to_region(sources,dxdy)\nsrcint = sourceintegration(x,env,limits)\n\n\n\n\n\n","category":"method"},{"location":"reference/#AeroAcoustics.refraction_correction","page":"API Reference","title":"AeroAcoustics.refraction_correction","text":"r,pc_pm = refraction_correction(E::Environment[,h1=1.5,h2=z0-h1])\n\nCompute propagation time correction and amplitude correction for 2D planar jet.\n\nReferences: -\tGlegg, S., & Devenport, W. (2017). Aeroacoustics of low mach number flows: Fundamentals, analysis, and measurement. Chap. 10.\n\n\n\n\n\n","category":"function"},{"location":"reference/#AeroAcoustics.refraction_correction-NTuple{6, Any}","page":"API Reference","title":"AeroAcoustics.refraction_correction","text":"r,pc_pm = refraction_correction(Δx,Δy,Δz,Ma,h1,h2)\n\nCompute propagation time correction and amplitude correction for 2D planar jet.\n\nReferences: -\tGlegg, S., & Devenport, W. (2017). Aeroacoustics of low mach number flows: Fundamentals, analysis, and measurement. Chap. 10.\n\n\n\n\n\n","category":"method"},{"location":"reference/#Advanced-methods-1","page":"API Reference","title":"Advanced methods","text":"","category":"section"},{"location":"reference/#","page":"API Reference","title":"API Reference","text":"Modules = [AeroAcoustics]\nPages   = [\"cleansc.jl\",\"damas.jl\",\"fista.jl\"]","category":"page"},{"location":"reference/#AeroAcoustics.cleanSC-Tuple{Any}","page":"API Reference","title":"AeroAcoustics.cleanSC","text":"cleanSC(E[;maxiter=50,ϕ=0.5,stopn=10,peak_removal=false,trust_region=nothing])\n\nCLEAN-SC algorithm for source identification and quantification optionally setting maximum iterations maxiter (default 50), and loop gain ϕ (default 0.5). Additionally, a stopping criterion max_peak[i] > max_peak[i-stopn] can be set with parameter stopn. Subtraction of peak sources in the dirty map is supported by peak_removal=true/false to remove peak sources outside trust_region with limits given as [xmin,xmax,ymin,ymax] e.g. trust_region=[-0.75;1.5;-1.0;1.0].\n\nReferences:\n\n-\tSijtsma, P. (2007). CLEAN based on spatial source coherence. International Journal of Aeroacoustics, 6(4), 357–374.\n\nWith inspiration from https://github.com/acoular/acoular/blob/66cba3cffb3bc72602c869f99347be76798f4ac1/acoular/fbeamform.py#L1496\n\n\n\n\n\n","category":"method"},{"location":"reference/#AeroAcoustics.damas-Union{Tuple{FA}, Tuple{T}, Tuple{Environment, FA}, Tuple{Environment, FA, T}, Tuple{Environment, FA, T, Real}} where {T<:AbstractArray, FA<:FreqArray}","page":"API Reference","title":"AeroAcoustics.damas","text":"damas(env::Environment, b [,f<:AbstractArray, ω::Real]; maxiter=10)\n\nPerforms exactly maxiter DAMAS iterations for all frequency bins in env.fn or frequencies in f. f must contain values that match exact a (sub)set of the values in env.fn. Successive Over Relaxation (SOR) can be set with relaxation parameter ω. Default is ω=1 corresponding to no relaxation.\n\nReferences:\n\nBrooks, T. F. et al. (2006). A deconvolution approach for the mapping of acoustic sources (DAMAS) determined from phased microphone arrays. J.Sound.Vib. 294(4), 856–879. https://doi.org/10.1016/j.jsv.2005.12.046\n\n\n\n\n\n","category":"method"},{"location":"reference/#AeroAcoustics.fista-Union{Tuple{FA}, Tuple{T}, Tuple{Environment, FA, FA}, Tuple{Environment, FA, FA, T}} where {T<:AbstractArray, FA<:FreqArray}","page":"API Reference","title":"AeroAcoustics.fista","text":"fista(env::Environment,b ,p [,f<:AbstractArray]; tol=1e-6, maxit=1000)\n\nPerforms deconvolution with FISTA with a nonnegativity constraint for all frequency bins in env.fn or frequencies in f. f must contain values that match exact a (sub)set of the values in env.fn. \n\nArguments\n\nRequired:\n\nenv::Environment: Environment struct\nb::FreqArray: Beamforming array\np::FreqArray: Point spread function array\n\nOptional:\n\ntol: Convergence tolerance (default: 1e-6)\nmaxit: Maximum number of iterations (default: 1000)\n\nReferences:\n\nBeck, A., & Teboulle, M. (2009). A fast iterative shrinkage-thresholding algorithm for linear inverse problems.    SIAM journal on imaging sciences, 2(1), 183-202.\nLylloff, O., Fernández-Grande, E., Agerkvist, F., Hald, J., Tiana Roig, E., & Andersen, M. S. (2015). Improving the efficiency of deconvolution algorithms for sound source localization.    The journal of the acoustical society of America, 138(1), 172-180\n\n\n\n\n\n","category":"method"},{"location":"#AeroAcoustics-1","page":"AeroAcoustics","title":"AeroAcoustics","text":"","category":"section"},{"location":"#","page":"AeroAcoustics","title":"AeroAcoustics","text":"AeroAcoustics.jl is a package for post-processing of microphone array measurements. It aims to provide basic functionality for computing cross-spectral matrices and frequency-domain beamforming.","category":"page"},{"location":"#","page":"AeroAcoustics","title":"AeroAcoustics","text":"The package repository is here: https://github.com/1oly/AeroAcoustics.jl","category":"page"},{"location":"#","page":"AeroAcoustics","title":"AeroAcoustics","text":"This package has been developed over several years, but has reached a stable state. A brief introduction to the usage is given below.","category":"page"},{"location":"#Installation-1","page":"AeroAcoustics","title":"Installation","text":"","category":"section"},{"location":"#","page":"AeroAcoustics","title":"AeroAcoustics","text":"From the julia REPL:  ","category":"page"},{"location":"#","page":"AeroAcoustics","title":"AeroAcoustics","text":"pkg> add AeroAcoustics","category":"page"},{"location":"#","page":"AeroAcoustics","title":"AeroAcoustics","text":"and optionally running the tests:  ","category":"page"},{"location":"#","page":"AeroAcoustics","title":"AeroAcoustics","text":"pkg> test AeroAcoustics","category":"page"},{"location":"#","page":"AeroAcoustics","title":"AeroAcoustics","text":"This runs the tests and downloads a measurement file to the /data directory.","category":"page"},{"location":"#Quick-start-1","page":"AeroAcoustics","title":"Quick start","text":"","category":"section"},{"location":"#","page":"AeroAcoustics","title":"AeroAcoustics","text":"The package is structured around the struct Environment, that takes all neccessary variables associated with an acoustic image as input. We will use the measurement data downloaded for the unit tests, which is located in /data. This file is a cross-spectral matrix (csm), a frequency domain representation of the measurement. This example is also available as a Jupyter notebook in the examples directory. First we import packages for reading data and plotting:","category":"page"},{"location":"#","page":"AeroAcoustics","title":"AeroAcoustics","text":"using HDF5, AeroAcoustics, PyPlot","category":"page"},{"location":"#","page":"AeroAcoustics","title":"AeroAcoustics","text":"Open the hdf5 file from the test directory and assemble the data to a Complex array.","category":"page"},{"location":"#","page":"AeroAcoustics","title":"AeroAcoustics","text":"csm_file = joinpath(dirname(@__DIR__),\"test\",\"data\",\"test1_csm.h5\")\ncsm_ref = h5open(csm_file, \"r\") do file\n    read(file, \"CsmData/csmReal\")+im*read(file, \"CsmData/csmImag\")\nend","category":"page"},{"location":"#","page":"AeroAcoustics","title":"AeroAcoustics","text":"and get the associated frequencies, microphone array and measurement distance z0:","category":"page"},{"location":"#","page":"AeroAcoustics","title":"AeroAcoustics","text":"fc = h5read(csm_file, \"CsmData\")[\"binCenterFrequenciesHz\"]\nmicgeom = h5read(csm_file, \"CsmData\")[\"arrayGeom\"]\nz0 = h5readattr(csm_file, \"CsmData\")[\"z0\"]","category":"page"},{"location":"#","page":"AeroAcoustics","title":"AeroAcoustics","text":"We now have all the data to populate the Environment struct. First, the csm is constructed as a FreqArray:","category":"page"},{"location":"#","page":"AeroAcoustics","title":"AeroAcoustics","text":"CSM = FreqArray(csm_ref,fc)","category":"page"},{"location":"#","page":"AeroAcoustics","title":"AeroAcoustics","text":"which holds the array and associated frequency bins. The Environment is defined:","category":"page"},{"location":"#","page":"AeroAcoustics","title":"AeroAcoustics","text":"E = Environment(\n    z0=z0,\n    micgeom=micgeom,\n    CSM=CSM,\n    flim=(3000,4000),\n    Nx = 21,\n    Ny = 21,\n    xlim=(-0.5,0.5),\n    ylim=(-0.5,0.5),\n    multi_thread = true # multi-threading can be enabled globally like this\n    )","category":"page"},{"location":"#","page":"AeroAcoustics","title":"AeroAcoustics","text":"Where the measurement distance z0, the microphone geometry micgeom, and the csm CSM are required variables.  See the optional inputs for Environment by typing:","category":"page"},{"location":"#","page":"AeroAcoustics","title":"AeroAcoustics","text":"help?> Environment","category":"page"},{"location":"#","page":"AeroAcoustics","title":"AeroAcoustics","text":"Now, we need to assign steering vectors (transfer functions) between the grid points defined in the environment E and the microphone locations in micgeom, this is done in a simple manner:","category":"page"},{"location":"#","page":"AeroAcoustics","title":"AeroAcoustics","text":"steeringvectors!(E)","category":"page"},{"location":"#","page":"AeroAcoustics","title":"AeroAcoustics","text":"where the \"!\" mutates the environment E and stores the steering vectors associated with the Environment. If a flow field is defined in the environment, the correct steering vectors will automatically be calculated. Next, we calculate the beamforming image:","category":"page"},{"location":"#","page":"AeroAcoustics","title":"AeroAcoustics","text":"b = beamforming(E)","category":"page"},{"location":"#","page":"AeroAcoustics","title":"AeroAcoustics","text":"the output is a FreqArray of size E.Nx*E.Ny times the number of frequency bins within the limits defined in E. To plot the acoustic image, reshape the beamforming result and convert to dB:","category":"page"},{"location":"#","page":"AeroAcoustics","title":"AeroAcoustics","text":"bdB = SPL.(reshape(b[:,1],E.Nx,E.Ny))\npcolormesh(E.rx,E.ry,bdB)\ncolorbar()","category":"page"},{"location":"#","page":"AeroAcoustics","title":"AeroAcoustics","text":"Check out examples/Quick_start.ipynb to see the output image.","category":"page"},{"location":"#Advanced-methods-1","page":"AeroAcoustics","title":"Advanced methods","text":"","category":"section"},{"location":"#","page":"AeroAcoustics","title":"AeroAcoustics","text":"Two advanced and widely used methods for improving the beamforming image are Clean-SC and DAMAS, which can be easily called by:   ","category":"page"},{"location":"#","page":"AeroAcoustics","title":"AeroAcoustics","text":"xSC = cleanSC(E)\nxD = damas(E,b)","category":"page"},{"location":"#","page":"AeroAcoustics","title":"AeroAcoustics","text":"Check out examples/Quick_start.ipynb to see examples of the acoustic images.","category":"page"},{"location":"#Source-integration-1","page":"AeroAcoustics","title":"Source integration","text":"","category":"section"},{"location":"#","page":"AeroAcoustics","title":"AeroAcoustics","text":"In a typical workflow, the acoustic images are used to focus on selected regions of the spatial domain and extract a spectrum. The source integration is called with","category":"page"},{"location":"#","page":"AeroAcoustics","title":"AeroAcoustics","text":"sourceintegration(x,E,int_region)","category":"page"},{"location":"#","page":"AeroAcoustics","title":"AeroAcoustics","text":"where x is the source map, E the environment struct and int_region describe the limits of a square to integrate over. A utility function AeroAcoustics.point_to_region can help define limits  by giving a point and extent as input, e.g.,   ","category":"page"},{"location":"#","page":"AeroAcoustics","title":"AeroAcoustics","text":"src_pos = (0.0, 1.0) # Point to integrate\ndxdy = (0.5,0.5) # Size of square extenting from src_pos \nint_region = AeroAcoustics.point_to_region(src_pos,dxdy)\n4-element Vector{Float64}:\n -0.25\n  0.25\n  0.75\n  1.25","category":"page"}]
}
